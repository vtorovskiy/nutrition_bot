import telebot
from telebot import types
import os
import sys
import logging
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from telebot import custom_filters
from food_recognition.aitunnel_adapter import AITunnelNutritionAdapter
from database.db_manager import DatabaseManager, Session
from database.models import User, FoodAnalysis
from datetime import datetime, timedelta, date
from telebot.handler_backends import State, StatesGroup
from utils.helpers import get_nutrition_indicators
from database.models import User, FoodAnalysis, UserSubscription
from food_recognition.barcode_scanner import BarcodeScanner

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from config import TELEGRAM_BOT_TOKEN, SUBSCRIPTION_COST, FREE_REQUESTS_LIMIT
from database.db_manager import DatabaseManager
from food_recognition.vision_api import FoodRecognition
from food_recognition.nutrition_calc import NutritionCalculator
from payments.yukassa import YuKassaPayment
from utils.helpers import (
    download_photo, format_nutrition_result, get_subscription_info,
    format_datetime, get_remaining_subscription_days
)

# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: UTC+3
TIMEZONE_OFFSET = 3  # –ß–∞—Å—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_storage = StateMemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, state_storage=state_storage)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class BotStates(StatesGroup):
    waiting_for_food_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
    waiting_for_portion_size = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_activity = State()
    waiting_for_goal = State()
    waiting_for_product_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É
    waiting_for_product_calories = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–∞–ª–æ—Ä–∏–π
    waiting_for_product_pfc = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ë–ñ–£

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
user_stats_dates = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
food_recognition = FoodRecognition()
aitunnel_adapter = AITunnelNutritionAdapter()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    DatabaseManager.get_or_create_user(user_id, username, first_name, last_name)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name or username or '–¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
        f"–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –±–ª—é–¥ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥—É. "
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞, –∏ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –µ—ë –ö–ë–ñ–£ "
        f"(–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã).\n\n"
        f"üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        f"/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        f"/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        f"/setup - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–æ—Ä–º –ö–ë–ñ–£\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    is_subscribed = DatabaseManager.check_subscription_status(user_id)
    remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
    subscription_info = get_subscription_info(remaining_requests, is_subscribed)
    
    welcome_text += subscription_info
    
    # –ö–Ω–æ–ø–∫–∏
    markup = InlineKeyboardMarkup(row_width=1)
    if not is_subscribed:
        markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£
    markup.add(InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –ö–ë–ñ–£", callback_data="setup_profile"))
    
    bot.send_message(message.chat.id, welcome_text, parse_mode="Markdown", reply_markup=markup)

@bot.message_handler(commands=['setup'])
def setup_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = DatabaseManager.get_user_profile(user_id)
    
    if user_profile and (user_profile.get('gender') or user_profile.get('daily_calories')):
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        profile_text = "‚öôÔ∏è *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        
        if user_profile.get('gender'):
            profile_text += f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_profile['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        if user_profile.get('age'):
            profile_text += f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_profile['age']} –ª–µ—Ç\n"
        if user_profile.get('weight'):
            profile_text += f"‚Ä¢ –í–µ—Å: {user_profile['weight']} –∫–≥\n"
        if user_profile.get('height'):
            profile_text += f"‚Ä¢ –†–æ—Å—Ç: {user_profile['height']} —Å–º\n"
        if user_profile.get('activity_level'):
            profile_text += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_profile['activity_level']}\n"
        
        profile_text += "\n*–í–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –ö–ë–ñ–£:*\n"
        
        if user_profile.get('daily_calories'):
            profile_text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {user_profile['daily_calories']} –∫–∫–∞–ª\n"
        if user_profile.get('daily_proteins'):
            profile_text += f"‚Ä¢ –ë–µ–ª–∫–∏: {user_profile['daily_proteins']} –≥\n"
        if user_profile.get('daily_fats'):
            profile_text += f"‚Ä¢ –ñ–∏—Ä—ã: {user_profile['daily_fats']} –≥\n"
        if user_profile.get('daily_carbs'):
            profile_text += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {user_profile['daily_carbs']} –≥\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="setup_profile"),
            InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –Ω–æ—Ä–º—ã –≤—Ä—É—á–Ω—É—é", callback_data="setup_manual_norms")
        )
        
        bot.send_message(message.chat.id, profile_text, parse_mode="Markdown", reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="setup_profile"),
            InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –Ω–æ—Ä–º—ã –≤—Ä—É—á–Ω—É—é", callback_data="setup_manual_norms")
        )
        
        setup_text = (
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
            "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤–∞—à–∏—Ö –¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ—Ä–º –ö–ë–ñ–£ —è –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "1. *–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å* - —è –ø–æ–º–æ–≥—É –≤–∞–º –≤–≤–µ—Å—Ç–∏ –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å, —Ä–æ—Å—Ç –∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, "
            "–∞ –∑–∞—Ç–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–æ—Ä–º—ã –ö–ë–ñ–£.\n"
            "2. *–ó–∞–¥–∞—Ç—å –Ω–æ—Ä–º—ã –≤—Ä—É—á–Ω—É—é* - –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∞–º–∏ —É–∫–∞–∑–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤.\n\n"
            "_–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º._"
        )
        
        bot.send_message(message.chat.id, setup_text, parse_mode="Markdown", reply_markup=markup)

# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("setup_"))
def setup_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    if call.data == "setup_profile":
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        bot.delete_message(chat_id, call.message.message_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
            InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")
        )
        
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=markup
        )
    
    elif call.data == "setup_manual_norms":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –Ω–æ—Ä–º
        bot.delete_message(chat_id, call.message.message_id)
        
        manual_norms_text = (
            "*–í–≤–æ–¥ –¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ—Ä–º –ö–ë–ñ–£ –≤—Ä—É—á–Ω—É—é*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–∫–∞–ª–æ—Ä–∏–∏ –±–µ–ª–∫–∏ –∂–∏—Ä—ã —É–≥–ª–µ–≤–æ–¥—ã`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `2000 150 70 200`\n\n"
            "–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:\n"
            "- 2000 –∫–∫–∞–ª\n"
            "- 150 –≥ –±–µ–ª–∫–∞\n"
            "- 70 –≥ –∂–∏—Ä–æ–≤\n"
            "- 200 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"
        )
        
        sent_message = bot.send_message(
            chat_id,
            manual_norms_text,
            parse_mode="Markdown"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ—Ä–º
        bot.register_next_step_handler(sent_message, process_manual_norms)

@bot.callback_query_handler(func=lambda call: call.data.startswith("gender_"))
def gender_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    gender = call.data.split("_")[1]  # 'male' –∏–ª–∏ 'female'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = user_data.get(user_id, {})
    user_data[user_id]['gender'] = gender
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    bot.edit_message_text(
        f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        f"–ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):",
        chat_id,
        call.message.message_id,
        parse_mode="Markdown"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    bot.set_state(user_id, BotStates.waiting_for_age, chat_id)

@bot.message_handler(state=BotStates.waiting_for_age)
def process_age(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    age_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    try:
        age = int(age_text)
        if age < 12 or age > 100:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 12 –¥–æ 100 –ª–µ—Ç")
    except ValueError as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 12 –¥–æ 100):")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]['age'] = age
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ)
    bot.delete_message(chat_id, message.message_id-1)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    sent_message = bot.send_message(
        chat_id,
        f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        f"–ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_data[user_id]['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:",
        parse_mode="Markdown"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞
    bot.set_state(user_id, BotStates.waiting_for_weight, chat_id)

@bot.message_handler(state=BotStates.waiting_for_weight)
def process_weight(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    weight_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    try:
        weight = float(weight_text.replace(',', '.'))
        if weight < 30 or weight > 300:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥")
    except ValueError as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 300):")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]['weight'] = weight
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å –æ –≤–µ—Å–µ)
    bot.delete_message(chat_id, message.message_id-1)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    sent_message = bot.send_message(
        chat_id,
        f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        f"–ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_data[user_id]['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data[user_id]['age']} –ª–µ—Ç\n"
        f"–í–µ—Å: {weight} –∫–≥\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:",
        parse_mode="Markdown"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
    bot.set_state(user_id, BotStates.waiting_for_height, chat_id)

@bot.message_handler(state=BotStates.waiting_for_height)
def process_height(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    height_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    try:
        height = float(height_text.replace(',', '.'))
        if height < 100 or height > 250:
            raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 250):")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]['height'] = height
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
    bot.delete_state(user_id, chat_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ (1.2)", callback_data="activity_1.2"),
        InlineKeyboardButton("–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.375)", callback_data="activity_1.375"),
        InlineKeyboardButton("–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.55)", callback_data="activity_1.55"),
        InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.725)", callback_data="activity_1.725"),
        InlineKeyboardButton("–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.9)", callback_data="activity_1.9")
    )
    
    activity_text = (
        f"–†–æ—Å—Ç: {height} —Å–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n"
        "‚Ä¢ *–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏* - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏\n"
        "‚Ä¢ *–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å* - –ª–µ–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ *–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å* - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ *–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å* - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ *–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å* - —Ç—è–∂–µ–ª–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞, 2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –¥–µ–Ω—å"
    )
    
    bot.send_message(chat_id, activity_text, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("activity_"))
def activity_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    activity_level = float(call.data.split("_")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]['activity_level'] = activity_level
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª—å
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="goal_weight_loss"),
        InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", callback_data="goal_maintenance"),
        InlineKeyboardButton("–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="goal_weight_gain")
    )
    
    goal_text = (
        f"–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_level}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:\n\n"
        "‚Ä¢ *–ü–æ—Ö—É–¥–µ–Ω–∏–µ* - —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞, –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π\n"
        "‚Ä¢ *–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞* - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞\n"
        "‚Ä¢ *–ù–∞–±–æ—Ä –º–∞—Å—Å—ã* - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ—Å–∞ –∏ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã"
    )
    
    bot.edit_message_text(
        goal_text,
        chat_id,
        call.message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("goal_"))
def goal_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    goal = call.data.split("_", 1)[1]  # 'weight_loss', 'maintenance' –∏–ª–∏ 'weight_gain'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]['goal'] = goal
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = user_data[user_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã —Å —É—á–µ—Ç–æ–º —Ü–µ–ª–∏
    norms = DatabaseManager.update_user_profile(
        user_id,
        gender=user_profile['gender'],
        age=user_profile['age'],
        weight=user_profile['weight'],
        height=user_profile['height'],
        activity_level=user_profile['activity_level'],
        goal=user_profile['goal']
    )
    
    if norms:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_text = (
            "‚úÖ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!*\n\n"
            f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_profile['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
            f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_profile['age']} –ª–µ—Ç\n"
            f"‚Ä¢ –í–µ—Å: {user_profile['weight']} –∫–≥\n"
            f"‚Ä¢ –†–æ—Å—Ç: {user_profile['height']} —Å–º\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_profile['activity_level']}\n"
            f"‚Ä¢ –¶–µ–ª—å: {'–ü–æ—Ö—É–¥–µ–Ω–∏–µ' if user_profile['goal'] == 'weight_loss' else '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞' if user_profile['goal'] == 'maintenance' else '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã'}\n\n"
            "*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –ö–ë–ñ–£:*\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {norms['daily_calories']} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {norms['daily_proteins']} –≥\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {norms['daily_fats']} –≥\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {norms['daily_carbs']} –≥\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–∏—Ö –Ω–æ—Ä–º."
        )
        
        bot.edit_message_text(
            result_text,
            chat_id,
            call.message.message_id,
            parse_mode="Markdown"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        if user_id in user_data:
            del user_data[user_id]
    else:
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            chat_id,
            call.message.message_id
        )

def process_manual_norms(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ—Ä–º –ö–ë–ñ–£"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    try:
        values = message.text.strip().split()
        if len(values) != 4:
            raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ 4 —á–∏—Å–ª–∞")
        
        calories = float(values[0])
        proteins = float(values[1])
        fats = float(values[2])
        carbs = float(values[3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π
        if calories < 500 or calories > 10000:
            raise ValueError("–ö–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 500 –¥–æ 10000")
        if proteins < 10 or proteins > 500:
            raise ValueError("–ë–µ–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 10 –¥–æ 500")
        if fats < 10 or fats > 500:
            raise ValueError("–ñ–∏—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 10 –¥–æ 500")
        if carbs < 10 or carbs > 1000:
            raise ValueError("–£–≥–ª–µ–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000")
    except ValueError as e:
        bot.send_message(
            chat_id,
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ç—ã—Ä–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–∫–∞–ª–æ—Ä–∏–∏ –±–µ–ª–∫–∏ –∂–∏—Ä—ã —É–≥–ª–µ–≤–æ–¥—ã).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `2000 150 70 200`",
            parse_mode="Markdown"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    norms = DatabaseManager.update_user_profile(
        user_id,
        daily_calories=calories,
        daily_proteins=proteins,
        daily_fats=fats,
        daily_carbs=carbs
    )
    
    if norms:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_text = (
            "‚úÖ *–í–∞—à–∏ –Ω–æ—Ä–º—ã –ö–ë–ñ–£ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:*\n\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {norms['daily_calories']} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {norms['daily_proteins']} –≥\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {norms['daily_fats']} –≥\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {norms['daily_carbs']} –≥\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–∏—Ö –Ω–æ—Ä–º."
        )
        
        bot.send_message(
            chat_id,
            result_text,
            parse_mode="Markdown"
        )
    else:
        bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ—Ä–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üì± *SnapEat - –ü–æ–º–æ—â—å*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã) "
        "–±–ª—é–¥ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞.\n\n"
        "üîç *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞ –∏–ª–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥ –±–æ—Ç—É\n"
        "2. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–Ω–∞–ª–∏–∑–∞ (–æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
        "üìã *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "/status - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
        "üí≥ *–ü–æ–¥–ø–∏—Å–∫–∞:*\n"
        f"- –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {FREE_REQUESTS_LIMIT} –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        f"- –ü–æ–¥–ø–∏—Å–∫–∞: {SUBSCRIPTION_COST} —Ä—É–±/–º–µ—Å—è—Ü - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤\n\n"
        "‚ùì *–í–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
    )
    
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription
@bot.message_handler(commands=['subscription'])
def subscription_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = DatabaseManager.check_subscription_status(user_id)
    remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if is_subscribed:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        from database.db_manager import Session  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        session = Session()
        try:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            subscription = session.query(UserSubscription).filter_by(
                user_id=user.id, 
                is_active=True
            ).order_by(UserSubscription.end_date.desc()).first()
            
            end_date = subscription.end_date if subscription else None
            remaining_days = get_remaining_subscription_days(end_date)
            
            subscription_text = (
                "‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞*\n\n"
                f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime(end_date)}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n\n"
                "–° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤."
            )
            
            # –ö–Ω–æ–ø–∫–∏
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        finally:
            session.close()
    else:
        subscription_text = (
            "‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_requests} –∏–∑ {FREE_REQUESTS_LIMIT}\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {SUBSCRIPTION_COST} —Ä—É–±/–º–µ—Å—è—Ü\n"
            "–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ë–ñ–£."
        )
        
        # –ö–Ω–æ–ø–∫–∏
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
    
    bot.send_message(message.chat.id, subscription_text, parse_mode="Markdown", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@bot.message_handler(commands=['stats'])
def stats_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ª–∏—Å—Ç–∞—Ç—å –¥–∞—Ç—ã"""
    user_id = message.from_user.id
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)
    if user_id not in user_stats_dates:
        user_stats_dates[user_id] = (datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)).date()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    show_stats_for_date(message.chat.id, user_id, user_stats_dates[user_id])

def show_stats_for_date(chat_id, user_id, selected_date):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Å –±–ª—é–¥–∞–º–∏
    
    Args:
        chat_id (int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selected_date (datetime.date): –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    daily_stats = DatabaseManager.get_nutrition_stats_for_date(user_id, selected_date)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    date_str = selected_date.strftime("%d.%m.%Y")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º - –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = InlineKeyboardMarkup(row_width=3)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–∞—Ç—ã
    prev_date = selected_date - timedelta(days=1)
    prev_button = InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥. –¥–µ–Ω—å", callback_data=f"stats_prev_{prev_date.strftime('%Y-%m-%d')}")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
    today_date = (datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)).date()
    today_button = InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"stats_today")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã
    next_date = selected_date + timedelta(days=1)
    can_show_next = next_date <= today_date
    next_button = InlineKeyboardButton("–°–ª–µ–¥. –¥–µ–Ω—å ‚û°Ô∏è", callback_data=f"stats_next_{next_date.strftime('%Y-%m-%d')}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è")
    if selected_date == today_date:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥. –¥–µ–Ω—å"
        markup.add(prev_button, today_button)
    elif can_show_next:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        markup.add(prev_button, today_button, next_button)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –±—É–¥—É—â–∏–π –¥–µ–Ω—å –∏–ª–∏ –¥–µ–Ω—å –ø–µ—Ä–µ–¥ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º - –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥. –¥–µ–Ω—å"
        markup.add(prev_button, today_button)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    if not daily_stats or daily_stats["total"]["count"] == 0:
        # –î–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        stats_text = f"üìä –ü–∏—Ç–∞–Ω–∏–µ –∑–∞ {date_str}\n\n–ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏."
        bot.send_message(chat_id, stats_text, parse_mode="Markdown", reply_markup=markup)
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    stats_text = f"üìä –ü–∏—Ç–∞–Ω–∏–µ –∑–∞ {date_str}\n\n"
    
    # –ó–∞–≤—Ç—Ä–∞–∫
    if daily_stats["breakfast"]["count"] > 0:
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        calories = int(daily_stats['breakfast']['calories'])
        proteins = int(daily_stats['breakfast']['proteins'])
        fats = int(daily_stats['breakfast']['fats'])
        carbs = int(daily_stats['breakfast']['carbs'])
        
        stats_text += f"üç≥ –ó–∞–≤—Ç—Ä–∞–∫: {calories} –∫–∫–∞–ª\n"
        stats_text += f"   –ë/–ñ/–£: {proteins}–≥ | {fats}–≥ | {carbs}–≥\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–∞
        for item in daily_stats["breakfast"]["items"]:
            item_calories = int(item['calories'])
            stats_text += f"   ‚Ä¢ {item['name']} ({item_calories} –∫–∫–∞–ª)\n"
        
        stats_text += "\n"
    
    # –û–±–µ–¥
    if daily_stats["lunch"]["count"] > 0:
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        calories = int(daily_stats['lunch']['calories'])
        proteins = int(daily_stats['lunch']['proteins'])
        fats = int(daily_stats['lunch']['fats'])
        carbs = int(daily_stats['lunch']['carbs'])
        
        stats_text += f"üç≤ –û–±–µ–¥: {calories} –∫–∫–∞–ª\n"
        stats_text += f"   –ë/–ñ/–£: {proteins}–≥ | {fats}–≥ | {carbs}–≥\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–∞
        for item in daily_stats["lunch"]["items"]:
            item_calories = int(item['calories'])
            stats_text += f"   ‚Ä¢ {item['name']} ({item_calories} –∫–∫–∞–ª)\n"
        
        stats_text += "\n"
    
    # –£–∂–∏–Ω
    if daily_stats["dinner"]["count"] > 0:
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        calories = int(daily_stats['dinner']['calories'])
        proteins = int(daily_stats['dinner']['proteins'])
        fats = int(daily_stats['dinner']['fats'])
        carbs = int(daily_stats['dinner']['carbs'])
        
        stats_text += f"üçΩ –£–∂–∏–Ω: {calories} –∫–∫–∞–ª\n"
        stats_text += f"   –ë/–ñ/–£: {proteins}–≥ | {fats}–≥ | {carbs}–≥\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–∞
        for item in daily_stats["dinner"]["items"]:
            item_calories = int(item['calories'])
            stats_text += f"   ‚Ä¢ {item['name']} ({item_calories} –∫–∫–∞–ª)\n"
        
        stats_text += "\n"
    
    # –ü–µ—Ä–µ–∫—É—Å—ã
    if daily_stats["snack"]["count"] > 0:
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        calories = int(daily_stats['snack']['calories'])
        proteins = int(daily_stats['snack']['proteins'])
        fats = int(daily_stats['snack']['fats'])
        carbs = int(daily_stats['snack']['carbs'])
        
        stats_text += f"üç™ –ü–µ—Ä–µ–∫—É—Å: {calories} –∫–∫–∞–ª\n"
        stats_text += f"   –ë/–ñ/–£: {proteins}–≥ | {fats}–≥ | {carbs}–≥\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–∞
        for item in daily_stats["snack"]["items"]:
            item_calories = int(item['calories'])
            stats_text += f"   ‚Ä¢ {item['name']} ({item_calories} –∫–∫–∞–ª)\n"
        
        stats_text += "\n"
    
    # –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å
    total_calories = int(daily_stats['total']['calories'])
    total_proteins = int(daily_stats['total']['proteins'])
    total_fats = int(daily_stats['total']['fats'])
    total_carbs = int(daily_stats['total']['carbs'])
    
    stats_text += f"üîÑ –ó–∞ –¥–µ–Ω—å: {total_calories} –∫–∫–∞–ª (–ë: {total_proteins}–≥ –ñ: {total_fats}–≥ –£: {total_carbs}–≥)"
    
    bot.send_message(chat_id, stats_text, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("stats_"))
def stats_navigation_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if call.data == "stats_today":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        user_stats_dates[user_id] = (datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)).date()
    elif call.data.startswith("stats_prev_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
        date_str = call.data[11:]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        user_stats_dates[user_id] = datetime.strptime(date_str, "%Y-%m-%d").date()
    elif call.data.startswith("stats_next_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        date_str = call.data[11:]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        user_stats_dates[user_id] = datetime.strptime(date_str, "%Y-%m-%d").date()
    
    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
    bot.delete_message(chat_id, call.message.message_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    show_stats_for_date(chat_id, user_id, user_stats_dates[user_id])

# –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
@bot.callback_query_handler(func=lambda call: call.data == "manual_input")
def manual_input_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–µ"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    barcode_text = call.message.text
    barcode = None
    for line in barcode_text.split('\n'):
        if '–®—Ç—Ä–∏—Ö–∫–æ–¥:' in line:
            barcode = line.replace('–®—Ç—Ä–∏—Ö–∫–æ–¥:', '').replace('*', '').strip()
            break
    
    if not barcode and user_id in user_data:
        barcode = user_data[user_id].get('barcode')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if user_id not in user_data:
        user_data[user_id] = {}
    
    user_data[user_id]['barcode'] = barcode
    user_data[user_id]['message_id'] = call.message.message_id
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
        chat_id,
        call.message.message_id
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    bot.set_state(user_id, BotStates.waiting_for_product_name, chat_id)

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = call.from_user.id
    
    if call.data == "subscribe":
        # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="subscribe_1"))
        markup.add(InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ (-10%)", callback_data="subscribe_3"))
        markup.add(InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ (-15%)", callback_data="subscribe_6"))
        markup.add(InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ (-20%)", callback_data="subscribe_12"))
        
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    
    elif call.data.startswith("subscribe_"):
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        months = int(call.data.split("_")[1])
        
        # –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏
        discount = 0
        if months == 3:
            discount = 0.1  # 10%
        elif months == 6:
            discount = 0.15  # 15%
        elif months == 12:
            discount = 0.2  # 20%
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        amount = SUBSCRIPTION_COST * months * (1 - discount)
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ë–ñ–£ –Ω–∞ {months} –º–µ—Å."
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
        payment_data = YuKassaPayment.create_payment(user_id, months, description)
        
        if payment_data and payment_data.get('confirmation_url'):
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            payment_text = (
                f"üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
                f"–ü–µ—Ä–∏–æ–¥: {months} –º–µ—Å.\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {payment_data['amount']} {payment_data['currency']}\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_data['confirmation_url']))
            
            bot.edit_message_text(
                payment_text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    elif call.data == "specify_food":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        user_data[user_id] = {
            'message_id': call.message.message_id,
            'last_photo_id': None  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
        bot.set_state(user_id, BotStates.waiting_for_food_name, call.message.chat.id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        bot.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=None
        )

    elif call.data == "specify_portion":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        user_data[user_id] = {
            'message_id': call.message.message_id,
            'last_photo_id': None
        }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏
        bot.set_state(user_id, BotStates.waiting_for_portion_size, call.message.chat.id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        bot.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=None
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
@bot.message_handler(state=BotStates.waiting_for_product_name)
def process_product_name(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    product_name = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    if user_id not in user_data:
        user_data[user_id] = {}
        
    user_data[user_id]['name'] = product_name
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
    sent_message = bot.send_message(
        chat_id,
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: *{product_name}*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π (–∫–∫–∞–ª):",
        parse_mode="Markdown"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–ª–æ—Ä–∏–π
    bot.set_state(user_id, BotStates.waiting_for_product_calories, chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞–ª–æ—Ä–∏–π
@bot.message_handler(state=BotStates.waiting_for_product_calories)
def process_product_calories(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞–ª–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    calories_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    try:
        calories = float(calories_text.replace(',', '.'))
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–æ—Ä–∏–∏
    user_data[user_id]['calories'] = calories
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ë–ñ–£
    sent_message = bot.send_message(
        chat_id,
        f"–ö–∞–ª–æ—Ä–∏–∏: *{calories}* –∫–∫–∞–ª\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ë–ñ–£ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ë–µ–ª–∫–∏ –ñ–∏—Ä—ã –£–≥–ª–µ–≤–æ–¥—ã' (—á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):",
        parse_mode="Markdown"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ë–ñ–£
    bot.set_state(user_id, BotStates.waiting_for_product_pfc, chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ë–ñ–£
@bot.message_handler(state=BotStates.waiting_for_product_pfc)
def process_product_pfc(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ë–ñ–£ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    pfc_text = message.text.strip()
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    try:
        values = pfc_text.split()
        if len(values) != 3:
            raise ValueError()
        
        proteins = float(values[0].replace(',', '.'))
        fats = float(values[1].replace(',', '.'))
        carbs = float(values[2].replace(',', '.'))
    except:
        bot.send_message(
            chat_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 5 20). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–ñ–£
    user_data[user_id]['proteins'] = proteins
    user_data[user_id]['fats'] = fats
    user_data[user_id]['carbs'] = carbs
    
    # –û—á–∏—Å—Ç–∫–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    barcode = user_data[user_id]['barcode']
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    clean_barcode = ''.join(filter(str.isdigit, barcode))

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º
    product_data = {
        'name': user_data[user_id]['name'],
        'calories': user_data[user_id]['calories'],
        'proteins': proteins,
        'fats': fats,
        'carbs': carbs,
        'barcode': clean_barcode,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥
        'portion_weight': 100,
        'estimated': False,
        'is_barcode': True
    }
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = format_nutrition_result(product_data, user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ç—Ä–∏—Ö–∫–æ–¥–µ
    result_text = f"üîç –®—Ç—Ä–∏—Ö–∫–æ–¥: *{product_data['barcode']}*\n" + result_text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_subscribed = DatabaseManager.check_subscription_status(user_id)
    remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
    
    if not is_subscribed:
        result_text += f"\n\n{get_subscription_info(remaining_requests, is_subscribed)}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –≤–µ—Å –ø–æ—Ä—Ü–∏–∏", callback_data="specify_portion"))
    
    if not is_subscribed:
        markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    bot.send_message(
        chat_id,
        result_text,
        parse_mode="Markdown",
        reply_markup=markup
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
    barcode_scanner = BarcodeScanner()
    barcode_scanner._save_to_local_database(product_data['barcode'], product_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    analysis_time = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
    DatabaseManager.save_food_analysis(
        user_id,
        product_data['name'],
        product_data['calories'],
        product_data['proteins'],
        product_data['fats'],
        product_data['carbs'],
        None,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
        product_data.get('portion_weight', 100),
        analysis_time
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.delete_state(user_id, chat_id)
    if user_id in user_data:
        del user_data[user_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –±–ª—é–¥–∞
@bot.message_handler(state=BotStates.waiting_for_food_name)
def handle_food_name(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    food_name = message.text.strip()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    bot.delete_state(user_id, chat_id)
    
    if food_name.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞']:
        bot.send_message(chat_id, "–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = user_data.get(user_id)
    if not user_info:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = bot.send_message(chat_id, "üîç –£—Ç–æ—á–Ω—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    try:
        # –ò—â–µ–º –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
        nutrition_data = NutritionCalculator.lookup_nutrition(food_name)
        
        # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if nutrition_data and not nutrition_data.get('estimated', False):
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_text = format_nutrition_result(nutrition_data, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            is_subscribed = DatabaseManager.check_subscription_status(user_id)
            remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
            
            if not is_subscribed:
                result_text += f"\n\n{get_subscription_info(remaining_requests, is_subscribed)}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session = DatabaseManager.Session()
            try:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if user:
                    food_analysis = session.query(FoodAnalysis).filter_by(
                        user_id=user.id
                    ).order_by(FoodAnalysis.analysis_date.desc()).first()
                    
                    if food_analysis:
                        food_analysis.food_name = food_name
                        food_analysis.calories = nutrition_data['calories']
                        food_analysis.proteins = nutrition_data['proteins']
                        food_analysis.fats = nutrition_data['fats']
                        food_analysis.carbs = nutrition_data['carbs']
                        session.commit()
            finally:
                session.close()
            
            # –ö–Ω–æ–ø–∫–∏
            markup = None
            if not is_subscribed:
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            bot.edit_message_text(
                result_text,
                chat_id,
                processing_message.message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
        else:
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.edit_message_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ '{food_name}'. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.",
                chat_id,
                processing_message.message_id
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –±–ª—é–¥–∞: {str(e)}")
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –±–ª—é–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            chat_id,
            processing_message.message_id
        )
    
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏
@bot.message_handler(state=BotStates.waiting_for_portion_size)
def handle_portion_size(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    portion_text = message.text.strip()
    
    # –û—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–µ
    if portion_text.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞']:
        bot.delete_state(user_id, chat_id)
        bot.send_message(chat_id, "–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not portion_text.isdigit():
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∂–¥–µ–º –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
    portion_size = int(portion_text)
    if portion_size <= 0:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏.")
        return  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∂–¥–µ–º –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    bot.delete_state(user_id, chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = user_data.get(user_id)
    if not user_info:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = bot.send_message(chat_id, "üîç –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é –ö–ë–ñ–£ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = Session()
        try:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if user:
                food_analysis = session.query(FoodAnalysis).filter_by(
                    user_id=user.id
                ).order_by(FoodAnalysis.analysis_date.desc()).first()
                
                if food_analysis:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ö–ë–ñ–£
                    old_portion = food_analysis.portion_weight or 100
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
                    ratio = portion_size / old_portion
                    
                    # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ 1 –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
                    new_calories = round(food_analysis.calories * ratio, 1)
                    new_proteins = round(food_analysis.proteins * ratio, 1)
                    new_fats = round(food_analysis.fats * ratio, 1)
                    new_carbs = round(food_analysis.carbs * ratio, 1)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    food_analysis.portion_weight = portion_size
                    food_analysis.calories = new_calories
                    food_analysis.proteins = new_proteins
                    food_analysis.fats = new_fats
                    food_analysis.carbs = new_carbs
                    session.commit()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    nutrition_data = {
                        'name': food_analysis.food_name,
                        'calories': new_calories,
                        'proteins': new_proteins,
                        'fats': new_fats,
                        'carbs': new_carbs,
                        'estimated': False,
                        'portion_weight': portion_size
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                    is_subscribed = DatabaseManager.check_subscription_status(user_id)
                    remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    result_text = format_nutrition_result(nutrition_data, user_id)
                    
                    if not is_subscribed:
                        result_text += f"\n\n{get_subscription_info(remaining_requests, is_subscribed)}"
                    
                    # –ö–Ω–æ–ø–∫–∏
                    markup = None
                    if not is_subscribed:
                        markup = InlineKeyboardMarkup()
                        markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    bot.edit_message_text(
                        result_text,
                        chat_id,
                        processing_message.message_id,
                        parse_mode="Markdown",
                        reply_markup=markup
                    )
                else:
                    bot.edit_message_text(
                        "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã —Å–Ω–æ–≤–∞.",
                        chat_id,
                        processing_message.message_id
                    )
        finally:
            session.close()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏: {str(e)}")
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –ö–ë–ñ–£. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            chat_id,
            processing_message.message_id
        )
    
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@bot.message_handler(content_types=['photo'])
def photo_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AITunnel –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = DatabaseManager.check_subscription_status(user_id)
    remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    if not is_subscribed and remaining_requests <= 0:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        
        bot.reply_to(
            message,
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=markup
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = bot.reply_to(message, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
        photo_path = download_photo(file_url)
        
        if not photo_path:
            bot.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                message.chat.id,
                processing_message.message_id
            )
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AITunnel –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£
        nutrition_data = aitunnel_adapter.process_image(image_path=photo_path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥
        if 'is_barcode' in nutrition_data:
            # –≠—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if nutrition_data.get('estimated', True):
                # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
                result_text = (
                    f"üîç –®—Ç—Ä–∏—Ö–∫–æ–¥: *{nutrition_data.get('barcode')}*\n\n"
                    f"–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ –ö–ë–ñ–£ –≤—Ä—É—á–Ω—É—é."
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é", callback_data="manual_input"))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                user_data[user_id] = {
                    'barcode': nutrition_data.get('barcode'),
                    'message_id': processing_message.message_id
                }
                
                bot.edit_message_text(
                    result_text,
                    message.chat.id,
                    processing_message.message_id,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
                return
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω
                result_text = format_nutrition_result(nutrition_data, user_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ç—Ä–∏—Ö–∫–æ–¥–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                result_text = f"üîç –®—Ç—Ä–∏—Ö–∫–æ–¥: *{nutrition_data.get('barcode')}*\n" + result_text
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–µ—Å–∞
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –≤–µ—Å –ø–æ—Ä—Ü–∏–∏", callback_data="specify_portion"))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                if not is_subscribed:
                    remaining_requests -= 1
                    result_text += f"\nüîÑ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_requests}\n"
                    markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
                analysis_time = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
                DatabaseManager.save_food_analysis(
                    user_id,
                    nutrition_data['name'],
                    nutrition_data['calories'],
                    nutrition_data['proteins'],
                    nutrition_data['fats'],
                    nutrition_data['carbs'],
                    None,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
                    nutrition_data.get('portion_weight', 100),
                    analysis_time
                )
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.edit_message_text(
                    result_text,
                    message.chat.id,
                    processing_message.message_id,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –µ–¥—ã –Ω–∞ —Ñ–æ—Ç–æ
        if not nutrition_data or ('name' in nutrition_data and nutrition_data['name'] == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ') or ('no_food' in nutrition_data and nutrition_data['no_food']) or ('name' in nutrition_data and nutrition_data['name'] == '–ï–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞'):
            # –ï—Å–ª–∏ –µ–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                "üîç –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –µ–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –±–ª—é–¥–æ.\n\n"
                "–î–ª—è –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n"
                "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Å–≤–µ—Ä—Ö—É\n"
                "‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –±–ª—é–¥–æ –∑–∞–Ω–∏–º–∞–ª–æ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∫–∞–¥—Ä–∞"
            )
            
            bot.edit_message_text(
                message_text,
                message.chat.id,
                processing_message.message_id
            )
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(photo_path):
                os.remove(photo_path)
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        result_text = format_nutrition_result(nutrition_data, user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—Ç–æ—á–Ω—ã–µ
        markup = InlineKeyboardMarkup(row_width=1)
        
        if nutrition_data.get('estimated', False):
            # –î–ª—è –Ω–µ—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Ç–æ—á–Ω–∏—Ç—å
            markup.add(InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞", callback_data="specify_food"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏
        markup.add(InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –≤–µ—Å –ø–æ—Ä—Ü–∏–∏", callback_data="specify_portion"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        if not is_subscribed:
            remaining_requests -= 1
            result_text += f"üîÑ–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_requests}\n"
            markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        else:
            result_text += "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        analysis_time = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
        DatabaseManager.save_food_analysis(
            user_id,
            nutrition_data['name'],
            nutrition_data['calories'],
            nutrition_data['proteins'],
            nutrition_data['fats'],
            nutrition_data['carbs'],
            photo_path,
            nutrition_data.get('portion_weight', None),
            analysis_time
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.edit_message_text(
            result_text,
            message.chat.id,
            processing_message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}")
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            message.chat.id,
            processing_message.message_id
        )
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if 'photo_path' in locals() and photo_path and os.path.exists(photo_path):
            os.remove(photo_path)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def text_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    help_text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
        "/start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    )
    
    bot.reply_to(message, help_text)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
bot.add_custom_filter(custom_filters.StateFilter(bot))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
def run_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞...")
    bot.remove_webhook()
    bot.infinity_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    run_polling()