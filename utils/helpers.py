import os
import tempfile
import requests
from datetime import datetime
import sys
from database.db_manager import DatabaseManager

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def download_photo(file_path):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ URL
    
    Args:
        file_path (str): URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        
    Returns:
        str: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    """
    try:
        response = requests.get(file_path, stream=True)
        if response.status_code == 200:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
            for chunk in response.iter_content(1024):
                temp_file.write(chunk)
            temp_file.close()
            return temp_file.name
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {response.status_code}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}")
        return None

def format_nutrition_result(nutrition_data, user_id=None):
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
    
    Args:
        nutrition_data (dict): –î–∞–Ω–Ω—ã–µ –æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
        user_id (int, optional): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ—Ä–º
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    if not nutrition_data:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞."
    
    # –¢–µ–∫—Å—Ç –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    if nutrition_data.get('estimated', False):
        accuracy_text = "‚ö†Ô∏è _–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞_"
    else:
        accuracy_text = "‚úÖ _–¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ_"
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = f"üçΩ *{nutrition_data['name']}*\n{accuracy_text}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Å–µ –ø–æ—Ä—Ü–∏–∏
    portion_text = ""
    if 'portion_weight' in nutrition_data and nutrition_data['portion_weight'] > 0:
        portion_text = f"‚öñÔ∏è –í–µ—Å –ø–æ—Ä—Ü–∏–∏: *{nutrition_data['portion_weight']}* –≥\n"
    text += portion_text
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID
    daily_norms = None
    if user_id:
        daily_norms = DatabaseManager.get_user_daily_norms(user_id)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    if daily_norms:
        indicators = get_nutrition_indicators(nutrition_data, daily_norms)
        
        if indicators and 'calories' in indicators:
            text += f"{indicators['calories']['indicator']} –ö–∞–ª–æ—Ä–∏–∏: *{nutrition_data['calories']}* –∫–∫–∞–ª\n"
            text += f"   {indicators['calories']['bar']} –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã\n"
        else:
            text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: *{nutrition_data['calories']}* –∫–∫–∞–ª\n"
        
        if indicators and 'proteins' in indicators:
            text += f"{indicators['proteins']['indicator']} –ë–µ–ª–∫–∏: *{nutrition_data['proteins']}* –≥\n"
            text += f"   {indicators['proteins']['bar']} –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã\n"
        else:
            text += f"ü•© –ë–µ–ª–∫–∏: *{nutrition_data['proteins']}* –≥\n"
        
        if indicators and 'fats' in indicators:
            text += f"{indicators['fats']['indicator']} –ñ–∏—Ä—ã: *{nutrition_data['fats']}* –≥\n"
            text += f"   {indicators['fats']['bar']} –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã\n"
        else:
            text += f"üßà –ñ–∏—Ä—ã: *{nutrition_data['fats']}* –≥\n"
        
        if indicators and 'carbs' in indicators:
            text += f"{indicators['carbs']['indicator']} –£–≥–ª–µ–≤–æ–¥—ã: *{nutrition_data['carbs']}* –≥\n"
            text += f"   {indicators['carbs']['bar']} –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã\n"
        else:
            text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: *{nutrition_data['carbs']}* –≥\n"
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ—Ä–º, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: *{nutrition_data['calories']}* –∫–∫–∞–ª\n"
        text += f"ü•© –ë–µ–ª–∫–∏: *{nutrition_data['proteins']}* –≥\n"
        text += f"üßà –ñ–∏—Ä—ã: *{nutrition_data['fats']}* –≥\n"
        text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: *{nutrition_data['carbs']}* –≥\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–µ/–≤—Ä–µ–¥–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    nutritional_insights = []
    
    if nutrition_data['calories'] < 200:
        nutritional_insights.append("üü¢ *–ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ –±–ª—é–¥–æ* - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞")
    elif nutrition_data['calories'] > 600:
        nutritional_insights.append("üü† *–í—ã—Å–æ–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ –±–ª—é–¥–æ* - —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏ –¥–∏–µ—Ç–µ")
    
    if nutrition_data['proteins'] > 25:
        nutritional_insights.append("üí™ *–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞* - —Ö–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è —Ä–æ—Å—Ç–∞ –º—ã—à—Ü")
    
    if nutrition_data['fats'] > 30:
        nutritional_insights.append("‚ö†Ô∏è *–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∏—Ä–æ–≤* - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º–æ–π")
    
    if nutrition_data['carbs'] > 60:
        nutritional_insights.append("üçö *–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤* - —Ö–æ—Ä–æ—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if nutritional_insights:
        text += "\n" + "\n".join(nutritional_insights)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ—Ä–º, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    if not daily_norms and user_id:
        text += "\n\nüí° _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–æ—Ä–º –ö–ë–ñ–£ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞._"
    
    return text

def get_subscription_info(remaining_requests, is_subscribed):
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
    
    Args:
        remaining_requests (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        is_subscribed (bool): –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        
    Returns:
        str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
    """
    if is_subscribed:
        return "‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤."
    else:
        if remaining_requests > 0:
            return f"‚ÑπÔ∏è –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {remaining_requests} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –î–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
        else:
            return "‚ùó –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."

def format_datetime(dt):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    
    Args:
        dt (datetime): –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    """
    if not dt:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    return dt.strftime("%d.%m.%Y %H:%M")

def get_remaining_subscription_days(end_date):
    """
    –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        end_date (datetime): –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
    """
    if not end_date:
        return 0
    
    delta = end_date - datetime.utcnow()
    return max(0, delta.days)

def generate_progress_bar(current, target, length=10):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    
    Args:
        current (float): –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        target (float): –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (100%)
        length (int): –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
        
    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    """
    if target <= 0:
        percent = 0
    else:
        percent = min(1.0, current / target)
    
    filled_length = int(length * percent)
    empty_length = length - filled_length
    
    bar = '‚ñ†' * filled_length + '‚ñ°' * empty_length
    percent_text = f"{int(percent * 100)}%"
    
    return f"{bar} {percent_text}"

def get_indicator_emoji(percent):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    
    Args:
        percent (float): –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –Ω–æ—Ä–º—ã (0-1)
        
    Returns:
        str: –≠–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    """
    if percent < 0.25:
        return "üî¥"  # –û—á–µ–Ω—å –º–∞–ª–æ
    elif percent < 0.5:
        return "üü†"  # –ú–∞–ª–æ
    elif percent < 0.75:
        return "üü°"  # –°—Ä–µ–¥–Ω–µ
    elif percent < 1.0:
        return "üü¢"  # –•–æ—Ä–æ—à–æ
    else:
        return "üîµ"  # –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ

def get_nutrition_indicators(nutrition_values, daily_norms):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    
    Args:
        nutrition_values (dict): –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ö–ë–ñ–£
        daily_norms (dict): –î–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –ö–ë–ñ–£
        
    Returns:
        dict: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞
    """
    if not daily_norms:
        return None
    
    result = {}
    
    # –ö–∞–ª–æ—Ä–∏–∏
    if daily_norms.get('daily_calories'):
        calories_percent = nutrition_values.get('calories', 0) / daily_norms['daily_calories']
        result['calories'] = {
            'percent': calories_percent,
            'bar': generate_progress_bar(nutrition_values.get('calories', 0), daily_norms['daily_calories']),
            'indicator': get_indicator_emoji(calories_percent)
        }
    
    # –ë–µ–ª–∫–∏
    if daily_norms.get('daily_proteins'):
        proteins_percent = nutrition_values.get('proteins', 0) / daily_norms['daily_proteins']
        result['proteins'] = {
            'percent': proteins_percent,
            'bar': generate_progress_bar(nutrition_values.get('proteins', 0), daily_norms['daily_proteins']),
            'indicator': get_indicator_emoji(proteins_percent)
        }
    
    # –ñ–∏—Ä—ã
    if daily_norms.get('daily_fats'):
        fats_percent = nutrition_values.get('fats', 0) / daily_norms['daily_fats']
        result['fats'] = {
            'percent': fats_percent,
            'bar': generate_progress_bar(nutrition_values.get('fats', 0), daily_norms['daily_fats']),
            'indicator': get_indicator_emoji(fats_percent)
        }
    
    # –£–≥–ª–µ–≤–æ–¥—ã
    if daily_norms.get('daily_carbs'):
        carbs_percent = nutrition_values.get('carbs', 0) / daily_norms['daily_carbs']
        result['carbs'] = {
            'percent': carbs_percent,
            'bar': generate_progress_bar(nutrition_values.get('carbs', 0), daily_norms['daily_carbs']),
            'indicator': get_indicator_emoji(carbs_percent)
        }
    
    return result